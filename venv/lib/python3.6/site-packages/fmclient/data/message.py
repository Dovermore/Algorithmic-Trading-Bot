import datetime
from enum import Enum


class Message(object):
    """
    Class for abstract the message entity. 
    The messages will be exchanged between a web browser and the algorithm.
    """
    def __init__(self, source, content, type, date=datetime.datetime.utcnow(), name=None):
        """
        The message type is defined by the content, the type of the message, the date of creation, and an optional name.
        The name attribute is relevant only for custom messages.
        :param source: source of the message.
        :param type: message type (one of MessageType enum).
        :param content: content of the message.
        :param date: date of message.
        :param name: optional name for custom message types.
        """
        self._source = source
        self._type = type
        self._content = content
        self._date = date
        self._name = name

    @property
    def source(self):
        return self._source

    @source.setter
    def source(self, value):
        self._source = value

    @property
    def type(self):
        return type

    @type.setter
    def type(self, value):
        self._type = value

    @property
    def content(self):
        return self._content

    @content.setter
    def content(self, value):
        self._content = value

    @property
    def name(self):
        return self._name

    @name.setter
    def name(self, value):
        self._name = value


class MessageType(Enum):
    """
    Message types for the messages that the trading algorithm will exchange with the web browser.
    The message types are for the algorithmic logic and not the python code.
    """
    ERROR = 1
    DEBUG = 2
    INFO = 3
    WARN = 4
    CUSTOM = 5
    USER = 6
    COMM = 7
